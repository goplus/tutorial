// XGo does not provide the typical, type-driven notion of subclassing, but it does have the ability to “borrow” pieces of an implementation by embedding types within a struct or interface.
// Only interfaces can be embedded within interfaces.

// The Sample has two struct types, Hello struct and Goodbye struct, each of which implements the Talk interface. And HelloGoodbye struct also implements Talk interface, which it does by combining Hello struct and Goodbye struct into one struct using embedding: it lists the types within the struct but does not give them field names.

type Talk interface {
	Say()
}

type Hello struct {
	name string
}

func (hello *Hello) Say() {
	println "Hello ", hello.name
}

func (hello *Hello) Sleep() {
	println "Hello ", hello.name, "go to bed!"
}

type Goodbye struct {
	name string
}

func (goodbye *Goodbye) Say() {
	println "Goodbye ", goodbye.name
}

type Forward struct {
}

func (forward *Forward) Say() {
	forward.SayForward()
}

func (forward *Forward) SayForward() {
	println "You must forward method!"
}

type HelloGoodbye struct {
	*Hello
	*Goodbye
	forward *Forward
}

func (hg *HelloGoodbye) Say() {
	hg.Hello.Say()
	hg.Goodbye.Say()
	hg.forward.Say()
}

helloGoodbye := HelloGoodbye{
	&Hello{"tsingbx"},
	&Goodbye{"tsingbx"},
	&Forward{},
}
helloGoodbye.Say()
println()
helloGoodbye.Sleep()
println()
helloGoodbye.forward.SayForward()

// The embedded elements are pointers to structs and of course must be initialized to point to valid structs before they can be used.

// The HelloGoodbye struct also have forward member written as forward *Forward, but then to promote the methods of the forward and to satisfy the Talk interface, we would also need to provide forwarding methods, like this: hg.forward.Say(). By embedding the structs directly, we avoid this bookkeeping. The methods of embedded types come along for free, which means that HelloGoodbye struct also has the methods of Hello struct and Goodbye struct.

// There's an important way in which embedding differs from subclassing. When we embed a type, the methods of that type become methods of the outer type, but when they are invoked the receiver of the method is the inner type, not the outer one. In our example, when the Sleep method of a HelloGoodbye is invoked, it has exactly the same effect as the forwarding method helloGoodbye.Hello.Sleep(); the receiver is the helloGoodbye.Hello, not the helloGoodbye itself.
