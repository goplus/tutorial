# XGo primitive types are
// <pre>
// bool
// int8    int16   int32   int    int64    int128
// uint8   uint16  uint32  uint   uint64   uint128
// uintptr (similar to C's size_t)
// byte (alias for uint8)
// rune (alias for int32, represents a Unicode code point)
// string
// float32 float64
// complex64 complex128
// bigint bigrat
// unsafe.Pointer (similar to C's void*)
// any (alias for Go's interface{})
// </pre>
//
// The example shows variables of several types, and also that variable declarations may be "factored" into blocks, as with import statements.

import (
	"math/cmplx"
)

var (
	ToBe   bool       = false
	MaxInt uint64     = 1<<64 - 1
	z      complex128 = cmplx.sqrt(-5 + 12i)
)

printf "Type: %T Value: %v\n", ToBe, ToBe
printf "Type: %T Value: %v\n", MaxInt, MaxInt
printf "Type: %T Value: %v\n", z, z

//The int, uint, and uintptr types are usually 32 bits wide on 32-bit systems and 64 bits wide on 64-bit systems. When you need an integer value you should use int unless you have a specific reason to use a sized or unsigned integer type.
