// The value of the interface type and the interface value are two different concepts.

// XGo is a statically typed programming language, types are a compile time concept, so a type is not a value.
// The value of the type descriptor provides information about each type, such as its name and methods.
// In an interface value, the type component is represented by the appropriate type descriptor.

// In XGo, interfaces variables are always initialize well-defined value as other type variables.
// The zero value for an interface has both its type and value components set to nil, for example:

import (
	"bytes"
	"io"
	"os"
)

var w io.Writer

println w == nil

var w2 io.Writer = os.Stdout

w2 = nil // same as w, both w and w2 interface variable has zero value

println w2 == nil

var r *bytes.Reader

println r == nil

var r2 io.Reader = r // r2 has non-zero interface value. Its dynamic type is *bytes.Reader and its dynamic value is nil. So the result of r2 == nil is false

if r2 != nil {
	slice := []byte{}
	r2.Read(slice) // panic: runtime error: invalid memory address or nil pointer dereference
}

// The interface variable w has zero value. So both its dynamic type and its dynamic value are nil. In this case, the result of if w == nil is true.
// The interface variable r2 has non-zero value. Its dynamic type is *bytes.Reader and its dynamic value is nil. So the result of r2 == nil is false.
